The picture is put in the upper-left corner of the screen, along with a green box surrounding a red circle. At first I had not idea what that background was, but after experimenting with the positioning of things and reading the source it appears that it is the circuluar frame, which makes sense - although it is exactly the size of the image, so it really isn't a good frame..... In the transparent parts of the picture it just has black - not sure if that was intended or not.

Part a questions:
1. You can modify the application to make it semi-transparent by changing the 3rd argument to the setup function from 0x00 to something non-zero.
2. You can modify the application to place the banner at the top of the screen by changing the 4th parameter to the place function - instead of 100, use 0.
3. Debug: 
real	0m0.174s
user	0m0.125s
sys	0m0.008s
Release:
real	0m0.114s
user	0m0.063s
sys	0m0.016s

4. To make the blue rectangle, change the color passed to the circular frame function to be 0xa00000ff. Then, in video_osd_setup, change the color fill to 0x00ffff00 to make it yellow.

5. In the function call to video_osd_setup, the memory address of osdFd is passed because to cleanup the application, osdFd is passed to a cleanup function, and so the setup function needs to modify the value at that memory address, not just use it locally.

part c questions

1. setDSSpaths  sets the paths for DSS, used in vid1show.
2. vid1Show connects overlays 0 and 1 to framebuffers 0 and 1. The positions can be changed by changing the line "echo 300,100 > $ovl1/position" to use whatever position you'd like.
3. You can change the size of the video by writing to the file output_size in the overlay.
4. With transparency enabled the video wouldn't display at all.

part d

capture video data for part b:
ioctl( captureFd, VIDIOC_DQBUF, &v4l2buf ) claims the buffer
ioctl( captureFd, VIDIOC_QBUF, &v4l2buf ) releases it back to the driver

Read video data for part c:
fread( dst, sizeof( char ), captureSize, inputFile ) 


Get video data: 
ioctl( captureFd, VIDIOC_DQBUF, &v4l2buf ) claims the buffer
ioctl( captureFd, VIDIOC_QBUF, &v4l2buf ) releases it back to the driver
Copy video data:
memcpy
Put video data:
fread( dst, sizeof( char ), captureSize, inputFile ) 
flip_display_buffers()

Plus, of course add the initization and other support functions for reading video input. Eventually I got it working.

21:

Part a question: The scheduling policy used for the seperate audio and video processes is time-slicing. Each one gets shared CPU resources.

Running the program:
Running htop, it shows 3 applications. Two threads, plus the main program. The threads seem pretty lightweight - in total they use between 5% and 10% of the CPU.

Using ps aux and ps aux -L you can see that the threads all share the same process ID, but they have different thread IDs (the threads for main, audio, and video). Here I can also see that the main process is using 0% CPU, whereas the threads are each using between 2% and 3% at the time of the ps - which makes sense, because the main.c thread is just a handler and shouldn't consume much CPU. In fact, after setup it should be waiting to join the threads, so it should be blocking.
